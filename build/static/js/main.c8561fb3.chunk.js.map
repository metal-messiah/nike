{"version":3,"sources":["enums/action-type.tsx","models/hobby.tsx","util/validator.tsx","components/form/form.tsx","components/hobbies/hobbies.tsx","components/header/header.tsx","App.tsx","serviceWorker.ts","reducers/app-reducer.tsx","index.tsx"],"names":["ActionType","Hobby","name","image","isValid","value","validators","every","v","isAlphabetic","val","length","match","isNotEmpty","FormComponent","props","useSelector","state","firstName","lastName","dispatch","useDispatch","useState","hobby","setHobby","localFirstName","setLocalFirstName","localLastName","setLocalLastName","isDirty","setIsDirty","loading","setLoading","showNameForms","setShowNameForms","open","setOpen","setSnackBar","focusElement","id","hobbyInput","document","getElementById","focus","updateDirty","property","obj","Object","assign","formIsValid","handleKeyDown","e","key","handleSubmit","a","simulateAPICall","Promise","resolve","reject","params","api_key","q","limit","axios","get","gif","url","data","images","downsized","h","type","ADD_HOBBY","payload","UPDATE_FIRST_NAME","UPDATE_LAST_NAME","message","Dialog","fullWidth","DialogTitle","DialogContent","className","onClick","FormControl","required","TextField","autoComplete","label","error","onChange","target","helperText","disabled","autoFocus","onKeyDown","DialogActions","Tooltip","title","deleteHobbyClicked","getSize","width","window","innerWidth","height","innerHeight","HobbiesComponent","hobbies","windowSize","setWindowSize","useEffect","setTimeout","element","String","scrollIntoView","behavior","addEventListener","placement","CLEAR_HOBBIES","GridList","cellHeight","spacing","cols","map","i","GridListTile","index","style","backgroundImage","GridListTileBar","actionIcon","IconButton","aria-label","REMOVE_HOBBY","deleteHobby","HeaderComponent","setShowForm","App","showForm","snackBar","Snackbar","anchorOrigin","vertical","horizontal","ContentProps","autoHideDuration","onClose","Boolean","location","hostname","initialState","store","createStore","action","splice","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8561fb3.chunk.js","sourcesContent":["export enum ActionType {\r\n  UPDATE_FIRST_NAME,\r\n  UPDATE_LAST_NAME,\r\n  ADD_HOBBY,\r\n  REMOVE_HOBBY,\r\n  CLEAR_HOBBIES,\r\n  SET_SNACKBAR_MESSAGE\r\n}\r\n","export class Hobby {\r\n  constructor(public name: string, public image: { small: string; large: string }) {}\r\n}\r\n","const isValid = (value: string, ...validators: Function[]) => {\r\n  return validators.every(v => v(value));\r\n};\r\n\r\nconst isAlphabetic = (val: string) => {\r\n  if (!val.length) {\r\n    return true;\r\n  }\r\n  const match = val.match(/[A-Za-z]/g);\r\n  if (match !== null && match.length === val.length) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isNotEmpty = (val: string) => {\r\n  return val.length > 0;\r\n};\r\n\r\nexport { isValid, isAlphabetic, isNotEmpty };\r\n","// function and state\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// style\r\nimport './form.scss';\r\n\r\n// models\r\nimport { Hobby } from '../../models/hobby';\r\n\r\n// interfaces\r\nimport { IState } from '../../interfaces/state';\r\n\r\n// enums\r\nimport { ActionType } from '../../enums/action-type';\r\n\r\n// ui\r\nimport { TextField, FormControl, Dialog, DialogTitle, DialogContent, DialogActions, Tooltip } from '@material-ui/core';\r\nimport { isValid, isAlphabetic, isNotEmpty } from '../../util/validator';\r\n\r\n// fetch\r\nimport axios from 'axios';\r\n\r\nconst FormComponent: React.FC<{ open: boolean; setOpen: Function; setSnackBar: Function }> = props => {\r\n  // redux state\r\n  const { firstName, lastName } = useSelector((state: IState) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  // local state\r\n  const [hobby, setHobby] = useState<string>('');\r\n  const [localFirstName, setLocalFirstName] = useState<string>(firstName);\r\n  const [localLastName, setLocalLastName] = useState<string>(lastName);\r\n  const [isDirty, setIsDirty] = useState({ firstName: false, lastName: false, hobby: false });\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [showNameForms, setShowNameForms] = useState<boolean>(firstName && lastName ? false : true);\r\n\r\n  // inherited props\r\n  const { open, setOpen, setSnackBar } = props;\r\n\r\n  // after submitting hobby, clear certain states\r\n  const resetForm = () => {\r\n    setShowNameForms(localFirstName && localLastName ? false : true);\r\n    setHobby('');\r\n    setIsDirty({ firstName: false, lastName: false, hobby: false });\r\n    setLoading(false);\r\n\r\n    focusElement('hobby-input');\r\n  };\r\n\r\n  const focusElement = (id: string) => {\r\n    // focus on input\r\n    const hobbyInput = document.getElementById(id);\r\n    if (hobbyInput) {\r\n      hobbyInput.focus();\r\n    }\r\n  };\r\n\r\n  // for validation messages, checks if field has been touched\r\n  const updateDirty = (property: keyof { firstName: false; lastName: false; hobby: false }) => {\r\n    const obj = Object.assign({}, isDirty);\r\n    obj[property] = true;\r\n    setIsDirty(obj);\r\n  };\r\n\r\n  // disable submit if not all fields are valid\r\n  const formIsValid = () => {\r\n    return (\r\n      isValid(localFirstName, isNotEmpty, isAlphabetic) &&\r\n      isValid(localLastName, isNotEmpty, isAlphabetic) &&\r\n      isValid(hobby, isNotEmpty)\r\n    );\r\n  };\r\n\r\n  // bind enter to 'add hobby' button\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && formIsValid()) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  // after 'add hobby' button is hit\r\n  const handleSubmit = async () => {\r\n    if (formIsValid()) {\r\n      // for loading spinner\r\n      setLoading(true);\r\n      await simulateAPICall();\r\n      // async is done, stop the spinner\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // api call for image for hobby\r\n  const simulateAPICall = async (): Promise<void> => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        // giphy api, use hobby keyword as search and grab the first matching image\r\n        const params = { api_key: 'TMWFkdtKTv6To8CjL9OqC2KBNQTM8D3N', q: hobby, limit: 1 };\r\n\r\n        // would normally do something like this on the backend\r\n        const gif = await axios.get(`https://api.giphy.com/v1/gifs/search`, { params });\r\n\r\n        // grab image url from giphy api response\r\n        const url = gif.data.data.length > 0 ? gif.data.data[0].images.downsized.url : null;\r\n\r\n        // build new hobby object from hobby tag and image url\r\n        const h = new Hobby(hobby, url);\r\n\r\n        // update redux names and hobby list\r\n        dispatch({ type: ActionType.ADD_HOBBY, payload: h });\r\n        dispatch({ type: ActionType.UPDATE_FIRST_NAME, payload: localFirstName });\r\n        dispatch({ type: ActionType.UPDATE_LAST_NAME, payload: localLastName });\r\n\r\n        // add a snackbar message of your triumph\r\n        setSnackBar({ open: true, message: `Added '${hobby}' To List` });\r\n\r\n        // reset the form to be ready for the next hobby\r\n        resetForm();\r\n\r\n        // resolve the async function\r\n        resolve();\r\n      } catch (err) {\r\n        // reject with error\r\n        reject(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} fullWidth={true}>\r\n      <DialogTitle>Add Hobby</DialogTitle>\r\n      <DialogContent>\r\n        <div className='form'>\r\n          <div>\r\n            {!showNameForms && (\r\n              <div className='name-display'>\r\n                <div>{`${firstName} ${lastName}`}</div>\r\n                <button className='edit-name' type='button' onClick={() => setShowNameForms(true)}>\r\n                  <i className='fas fa-pencil-alt' />\r\n                </button>\r\n              </div>\r\n            )}\r\n            {showNameForms && (\r\n              <FormControl required={true} fullWidth={true}>\r\n                <TextField\r\n                  autoComplete='first name'\r\n                  label='First Name'\r\n                  value={localFirstName}\r\n                  error={isDirty.firstName && !isValid(localFirstName, isNotEmpty, isAlphabetic)}\r\n                  onChange={e => {\r\n                    setLocalFirstName(e.target.value);\r\n                    updateDirty('firstName');\r\n                  }}\r\n                  helperText={isDirty.firstName && !isValid(localFirstName, isNotEmpty, isAlphabetic) ? 'Invalid' : ''}\r\n                  disabled={loading}\r\n                  autoFocus={true}\r\n                />\r\n              </FormControl>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {showNameForms && (\r\n              <FormControl required={true} fullWidth={true}>\r\n                <TextField\r\n                  autoComplete='last name'\r\n                  label='Last Name'\r\n                  value={localLastName}\r\n                  error={isDirty.lastName && !isValid(localLastName, isNotEmpty, isAlphabetic)}\r\n                  onChange={e => {\r\n                    setLocalLastName(e.target.value);\r\n                    updateDirty('lastName');\r\n                  }}\r\n                  helperText={isDirty.lastName && !isValid(localLastName, isNotEmpty, isAlphabetic) ? 'Invalid' : ''}\r\n                  disabled={loading}\r\n                  onKeyDown={handleKeyDown}\r\n                />\r\n              </FormControl>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <FormControl required={true} fullWidth={true}>\r\n              <TextField\r\n                id='hobby-input'\r\n                label='Add a Hobby'\r\n                value={hobby}\r\n                error={isDirty.hobby && !isValid(hobby, isNotEmpty)}\r\n                onChange={e => {\r\n                  setHobby(e.target.value);\r\n                  updateDirty('hobby');\r\n                }}\r\n                helperText={isDirty.hobby && !isValid(hobby, isNotEmpty) ? 'Required' : ''}\r\n                disabled={loading}\r\n                onKeyDown={handleKeyDown}\r\n              />\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Tooltip title={formIsValid() ? 'Add Hobby To List' : ''}>\r\n          <button\r\n            type='button'\r\n            id='add-button'\r\n            onClick={handleSubmit}\r\n            className={!formIsValid() ? 'disabled' : ''}\r\n            disabled={!formIsValid()}\r\n            onKeyDown={handleKeyDown}\r\n          >\r\n            {!loading && <i className='fas fa-plus-circle' />}\r\n            {loading && <i className='fas fa-spinner fa-spin' />}\r\n          </button>\r\n        </Tooltip>\r\n        <Tooltip title='Close'>\r\n          <button id='cancel-button' type='button' onClick={() => setOpen(false)}>\r\n            {!loading && <i className='fas fa-times-circle' />}\r\n          </button>\r\n        </Tooltip>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default FormComponent;\r\n","// functions and state\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// style\r\nimport './hobbies.scss';\r\n\r\n// interfaces\r\nimport { IState } from '../../interfaces/state';\r\n\r\n// enums\r\nimport { ActionType } from '../../enums/action-type';\r\n\r\n// ui\r\nimport { GridList, GridListTile, GridListTileBar, IconButton, Tooltip } from '@material-ui/core';\r\n\r\n// helpers\r\nlet deleteHobbyClicked = false;\r\nfunction getSize() {\r\n  return {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  };\r\n}\r\n\r\nconst HobbiesComponent: React.FC<{ setSnackBar: Function }> = props => {\r\n  // redux state\r\n  const { firstName, lastName, hobbies } = useSelector((state: IState) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  // local state\r\n  const [windowSize, setWindowSize] = useState<{ width: number; height: number }>(getSize());\r\n\r\n  // props\r\n  const { setSnackBar } = props;\r\n\r\n  // delete one hobby from list\r\n  const deleteHobby = (index: number) => {\r\n    deleteHobbyClicked = true;\r\n    dispatch({ type: ActionType.REMOVE_HOBBY, payload: index });\r\n    setSnackBar({ open: true, message: `Removed Hobby` });\r\n  };\r\n\r\n  // column width for tiles, mix it up to make it more interesting to look at\r\n  const getCols = (index: number) => {\r\n    if (index % 3 === 0 && index % 6 !== 0) {\r\n      return 2;\r\n    }\r\n    return 1;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // make sure the latest added one is in view\r\n    if (!deleteHobbyClicked) {\r\n      setTimeout(() => {\r\n        const element = document.getElementById(String(hobbies.length - 1));\r\n        if (element) {\r\n          element.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n      }, 100);\r\n    } else {\r\n      deleteHobbyClicked = false;\r\n    }\r\n  }, [hobbies]);\r\n\r\n  useEffect(() => {\r\n    // determines whether there should be 3 columns or 1 for grid\r\n    window.addEventListener('resize', () => setWindowSize(getSize()));\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return hobbies.length ? (\r\n    <div className=\"container\">\r\n      <div className=\"toolbar\">\r\n        <div className=\"user-name\">\r\n          {firstName} {lastName}\r\n        </div>\r\n        <Tooltip\r\n          title=\"Clear All Hobbies\"\r\n          placement=\"bottom\"\r\n          onClick={() => dispatch({ type: ActionType.CLEAR_HOBBIES, payload: null })}\r\n        >\r\n          <button id=\"clear-all\" type=\"button\">\r\n            <i className=\"fas fa-trash\" />\r\n          </button>\r\n        </Tooltip>\r\n      </div>\r\n      <GridList cellHeight={300} spacing={1} className=\"grid-list\" cols={windowSize.width > 720 ? 3 : 1}>\r\n        {hobbies.map((hobby, i) => (\r\n          <GridListTile className=\"tile\" key={i} cols={getCols(i)}>\r\n            <div\r\n              className=\"gif\"\r\n              id={String(i)}\r\n              style={{\r\n                backgroundImage: `url(${\r\n                  hobby.image ? hobby.image : 'https://media.giphy.com/media/3zhxq2ttgN6rEw8SDx/giphy.gif'\r\n                })`\r\n              }}\r\n            />\r\n            <GridListTileBar\r\n              title={hobby.name}\r\n              actionIcon={\r\n                <Tooltip title=\"Delete\">\r\n                  <IconButton aria-label={`Delete ${hobby.name}`} onClick={() => deleteHobby(i)}>\r\n                    <i className=\"inset-icon fas fa-trash\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  ) : (\r\n    <div />\r\n  );\r\n};\r\n\r\nexport default HobbiesComponent;\r\n","import React from 'react';\r\n\r\nimport './header.scss';\r\n\r\nconst HeaderComponent: React.FC<{ setShowForm: Function }> = props => {\r\n  const { setShowForm } = props;\r\n  return (\r\n    <h1>\r\n      HobbyPocket\r\n      <div className='add-hobby'>\r\n        <span>Add Hobby</span>\r\n        <button type='button' className='add-hobby-button' onClick={() => setShowForm(true)}>\r\n          <i className='fas fa-plus-circle' />\r\n        </button>\r\n      </div>\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default HeaderComponent;\r\n","// function and state\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// style\nimport './App.scss';\n\n// children components\nimport FormComponent from './components/form/form';\nimport HobbiesComponent from './components/hobbies/hobbies';\nimport HeaderComponent from './components/header/header';\n\n// ui\nimport { Snackbar } from '@material-ui/core';\n\n// interfaces\nimport { IState } from './interfaces/state';\nimport { SnackBar } from './interfaces/snackBar';\n\nconst App: React.FC = () => {\n  // global state\n  const { hobbies } = useSelector((state: IState) => state);\n\n  // local state\n  const [showForm, setShowForm] = useState<boolean>(false);\n  const [snackBar, setSnackBar] = useState<SnackBar>({ open: false, message: '' });\n\n  return (\n    <div className='App'>\n      <HeaderComponent setShowForm={setShowForm} />\n      {!hobbies.length && <h2 className='info'>Get Started By Adding Some Hobbies</h2>}\n      <HobbiesComponent setSnackBar={setSnackBar} />\n      <FormComponent open={showForm} setOpen={setShowForm} setSnackBar={setSnackBar} />\n      <Snackbar\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        key={`bottom,center`}\n        open={snackBar.open}\n        ContentProps={{\n          'aria-describedby': 'message-id'\n        }}\n        message={<span id='message-id'>{snackBar.message}</span>}\n        autoHideDuration={5000}\n        onClose={() => setSnackBar({ open: false, message: '' })}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { IState } from '../interfaces/state';\r\nimport { IAction } from '../interfaces/action';\r\n\r\nimport { ActionType } from '../enums/action-type';\r\n\r\nconst initialState: IState | any = {\r\n  firstName: '',\r\n  lastName: '',\r\n  hobbies: []\r\n};\r\n\r\nexport default function appReducer(state: IState = initialState, action: IAction) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case ActionType.UPDATE_FIRST_NAME:\r\n      return { ...state, firstName: payload };\r\n    case ActionType.UPDATE_LAST_NAME:\r\n      return { ...state, lastName: payload };\r\n    case ActionType.ADD_HOBBY:\r\n      return { ...state, hobbies: [...state.hobbies, payload] };\r\n    case ActionType.REMOVE_HOBBY:\r\n      const hobbies = [...state.hobbies];\r\n      hobbies.splice(payload, 1); // remove index item\r\n      return { ...state, hobbies };\r\n    case ActionType.CLEAR_HOBBIES:\r\n      return { ...state, hobbies: [] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport appReducer from './reducers/app-reducer';\n\nconst store: any = createStore(appReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}